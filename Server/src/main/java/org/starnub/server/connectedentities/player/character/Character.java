/*
* Copyright (C) 2014 www.StarNub.org - Underbalanced
*
* This file is part of org.starnub a Java Wrapper for Starbound.
*
* This above mentioned StarNub software is free software:
* you can redistribute it and/or modify it under the terms
* of the GNU General Public License as published by the Free
* Software Foundation, either version  3 of the License, or
* any later version. This above mentioned CodeHome software
* is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
* the GNU General Public License for more details. You should
* have received a copy of the GNU General Public License in
* this StarNub Software.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.starnub.server.connectedentities.player.character;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DataType;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import lombok.Getter;
import org.joda.time.DateTime;
import org.starnub.server.StarNub;
import org.starnub.server.connectedentities.player.account.Account;
import org.starnub.server.connectedentities.player.achievements.CharacterAchievement;

import java.util.UUID;


/**
 * StarNub's PlayerCharacter represents a character that belongs
 * to a player. We named it PlayerCharacter due to issues with
 * com.java having a Character class. We did not want to confuse
 * Plugin developers or API users.
 * <p>
 * The data is stored permanently in the database table "characters".
 * <p>
 * All data is established and saved once, but loaded as needed.
 *
 * @author Daniel (Underbalanced) (www.StarNub.org)
 * @since 1.0
 */
@DatabaseTable(tableName = "CHARACTERS")
public class Character {

    /**
     * Represents a unique characterId. It is unique based on Character Name and UUID
     */
    @Getter
    @DatabaseField(generatedId = true, columnName = "CHARACTER_ID")
    private volatile int characterid;

    /**
     * Represents the characters full name with color tags and all
     */
    @Getter
    @DatabaseField(dataType = DataType.STRING, uniqueCombo=true, columnName = "NAME")
    private volatile String name;

    /**
     * Represents the cleaned up version of the characters name without color tags
     */
    @Getter
    @DatabaseField(dataType = DataType.STRING, columnName = "CLEAN_NAME")
    private volatile String cleanName;

    /**
     * Represents the characters UUID generated by the Starbound Client
     */
    @Getter
    @DatabaseField(dataType = DataType.UUID, uniqueCombo=true, columnName = "UUID")
    private volatile UUID uuid;

    /**
     * Represents the last time this character was used
     */
    @Getter
    @DatabaseField(dataType = DataType.DATE_TIME, columnName = "LAST_SEEN")
    private volatile DateTime lastSeen;

    /**
     * Represents the total play time of this character
     */
    @Getter
    @DatabaseField(dataType = DataType.LONG, columnName = "PLAYED_TIME")
    private volatile long playedTime;

    /**
     * Represents the characters Account that this character is attached to
     */
    @Getter
    @DatabaseField(canBeNull = true, foreign = true, foreignAutoRefresh = true, maxForeignAutoRefreshLevel = 9, columnName = "STARNUB_ID")
    private volatile Account account;

    /**
     * Represents the ips that have been used by this character
     */
    @Getter
    @ForeignCollectionField(eager = true)
    private volatile ForeignCollection<CharacterIP> associatedIps;

    /**
     * Represents the characters achievements that have been earned
     */
    @Getter
    @ForeignCollectionField(eager = true)
    private volatile ForeignCollection<CharacterAchievement> characterAchievements;

    /**
     * Constructor for database purposes
     */
    public Character(){}

    /**
     * Required to build a character class
     * @param name String name of the character
     * @param cleanName String clean name of the character
     * @param uuid UUID of the character
     */
    public Character(String name, String cleanName, UUID uuid) {
        this.name = name;
        this.cleanName = cleanName;
        this.uuid = uuid;
        this.lastSeen = DateTime.now();
    }

    public void setLastSeen(DateTime lastSeen) {
        this.lastSeen = lastSeen;
        StarNub.getDatabaseTables().getCharacters().update(this);
    }

    public void updatePlayedTimeLastSeen() {
        this.playedTime = this.getPlayedTime()+(DateTime.now().getMillis()-lastSeen.getMillis());
        this.lastSeen = DateTime.now();
        StarNub.getDatabaseTables().getCharacters().update(this);
    }

    public void setPlayedTime(long playedTime) {
        this.playedTime = playedTime;
        StarNub.getDatabaseTables().getCharacters().update(this);
    }

    /**
     *
     * @param account Account which this character will belong too
     */
    public void setAccount(Account account) {
        this.account = account;
        StarNub.getDatabaseTables().getCharacters().update(this);
    }

    public void setAssociatedIps(ForeignCollection<CharacterIP> associatedIps) {
        this.associatedIps = associatedIps;
//        StarNub.getDatabase().updateCharacter(this);
    }

    @SuppressWarnings("unchecked")
    public void initialLogInProcessing(){
        this.account.setLastLogin(DateTime.now());
        this.account.loadPermissions();
        /* This will set the channel group for the chat channel from the loaded channel group, Needs refactoring later */
        account.getAccountSettings().setDefaultChatRoom(StarNub.getServer().getServerChat().getChatRoomByAnyIdentifier(account.getAccountSettings().getDefaultChatRoom().getChatRoomName()));
    }

}
