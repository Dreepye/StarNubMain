/*
* Copyright (C) 2014 www.StarNub.org - Underbalanced
*
* This utilities.file is part of org.starnub a Java Wrapper for Starbound.
*
* This above mentioned StarNub software is free software:
* you can redistribute it and/or modify it under the terms
* of the GNU General Public License as published by the Free
* Software Foundation, either version  3 of the License, or
* any later version. This above mentioned CodeHome software
* is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
* the GNU General Public License for more details. You should
* have received a copy of the GNU General Public License in
* this StarNub Software.  If not, see <http://www.gnu.org/licenses/>.
*/

package starnub.connections.player.session;

import com.j256.ormlite.field.DataType;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;
import org.joda.time.DateTime;
import starnub.StarNub;
import starnub.connections.player.account.Account;
import starnub.events.events.StarNubEvent;

/**
 * StarNub's Restricted Player class
 * <p>
 * The class will hold any restrictions a player might have.
 * <p>
 * All data is stored in the database
 *
 * @author Daniel (Underbalanced) (www.StarNub.org)
 * @since 1.0
 */
@DatabaseTable(tableName = "PLAYER_BANS")
public class Ban {

    /**
     * Represents the banId that was generated by the database tools
     */

    @DatabaseField(generatedId = true, columnName = "ID")
    private int banId;


    @DatabaseField(id = true, dataType = DataType.STRING, columnName = "CHARACTER_NAME")
    private volatile String characterName;

    /**
     * Represents the banIdentifier which can be a IP or uuid
     */

    @DatabaseField(dataType = DataType.STRING, unique = true, columnName = "IDENTIFIER")
    private String banIdentifier;

    /**
     * Represents who imposed the restriction as a String
     */

    @DatabaseField(dataType = DataType.STRING, columnName = "IMPOSER_NAME")
    private volatile String imposerName;

    /**
     * Represents who imposed the restriction as a Account
     */

    @DatabaseField(foreign = true, columnName = "STARNUB_ID")
    private volatile Account imposerAccount;

    /**
     * Represents the reason for the restriction
     */

    @DatabaseField(dataType = DataType.STRING, columnName = "REASON")
    private volatile String reason;


    /**
     * Represents the time the restriction was placed
     */

    @DatabaseField(dataType = DataType.DATE_TIME, columnName = "DATE")
    private volatile DateTime dateRestricted;

    /**
     * Represents the time the restriction will be removed
     */

    @DatabaseField(dataType = DataType.DATE_TIME, columnName = "DATE_RESTRICTION_EXPIRES")
    private volatile DateTime dateRestrictionExpires;

    /**
     * Constructor for database purposes
     */
    public Ban(){}

    public String getImposerName() {
        return imposerName;
    }

    public Account getImposerAccount() {
        return imposerAccount;
    }

    public String getReason() {
        return reason;
    }

    public DateTime getDateRestricted() {
        return dateRestricted;
    }

    public DateTime getDateRestrictionExpires() {
        return dateRestrictionExpires;
    }

    /**
     * This method is for setting a ban restriction
     * @param restrictedIdentifier String Represents the banIdentifier which can be a IP or uuid
     * @param dateRestrictionExpires long Represents the time the restriction will be removed
     */
    public void setBan(String restrictedIdentifier, String imposerName, String reason, Account imposerAccount, DateTime dateRestrictionExpires) {
        this.banIdentifier = restrictedIdentifier;
        this.imposerName = imposerName;
        this.imposerAccount = imposerAccount;
        this.reason = reason;
        this.dateRestricted = DateTime.now();
        this.dateRestrictionExpires = dateRestrictionExpires;
        addBan();
    }

    public int getBanId() {
        return banId;
    }

    public String getCharacterName() {
        return characterName;
    }

    public String getBanIdentifier() {
        return banIdentifier;
    }

    public void removeBan(){
        StarNub.getDatabaseTables().getPlayerSessionBans().delete(this);
        StarNub.getLogger().cInfoPrint("StarNub", "A ban was removed for " + characterName + ".");
        new StarNubEvent("StarNu_Ban_Removed", this);
        StarNub.getConnections().getBANS().remove(this.banIdentifier);
    }

    public void addBan(){
        StarNub.getDatabaseTables().getPlayerSessionBans().createOrUpdate(this);
        StarNub.getLogger().cInfoPrint("StarNub", "A ban was added for " + characterName + ".");
        new StarNubEvent("StarNu_Ban_Added", this);
        StarNub.getConnections().getBANS().put(this.banIdentifier, this);
    }
}
